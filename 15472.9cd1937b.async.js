(self.webpackChunk_dxsixpc_components=self.webpackChunk_dxsixpc_components||[]).push([[15472],{15472:function(){(function(a){function l(o){return RegExp("(\\()(?:"+o+")(?=[\\s\\)])")}function p(o){return RegExp("([\\s([])(?:"+o+")(?=[\\s)])")}var e="(?!\\d)[-+*/~!@$%^=<>{}\\w]+",d="(\\()",t="(?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\((?:[^()]|\\([^()]*\\))*\\))*\\))*\\))*\\))*",n={heading:{pattern:/;;;.*/,alias:["comment","title"]},comment:/;.*/,string:{pattern:/"(?:[^"\\]|\\.)*"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\s])/,symbol:RegExp("`"+e+"'")}},"quoted-symbol":{pattern:RegExp("#?'"+e),alias:["variable","symbol"]},"lisp-property":{pattern:RegExp(":"+e),alias:"property"},splice:{pattern:RegExp(",@?"+e),alias:["symbol","variable"]},keyword:[{pattern:RegExp("(\\()(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)(?=\\s)"),lookbehind:!0},{pattern:RegExp("(\\()(?:append|by|collect|concat|do|finally|for|in|return)(?=\\s)"),lookbehind:!0}],declare:{pattern:l("declare"),lookbehind:!0,alias:"keyword"},interactive:{pattern:l("interactive"),lookbehind:!0,alias:"keyword"},boolean:{pattern:p("nil|t"),lookbehind:!0},number:{pattern:p("[-+]?\\d+(?:\\.\\d*)?"),lookbehind:!0},defvar:{pattern:RegExp("(\\()def(?:const|custom|group|var)\\s+"+e),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:RegExp(e)}},defun:{pattern:RegExp("(\\()(?:cl-)?(?:defmacro|defun\\*?)\\s+"+e+"\\s+\\("+t+"\\)"),lookbehind:!0,greedy:!0,inside:{keyword:/^(?:cl-)?def\S+/,arguments:null,function:{pattern:RegExp("(^\\s)"+e),lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:RegExp("(\\()lambda\\s+\\(\\s*(?:&?"+e+"(?:\\s+&?"+e+")*\\s*)?\\)"),lookbehind:!0,greedy:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:RegExp(d+e),lookbehind:!0},punctuation:[/(?:['`,]?\(|[)\[\]])/,{pattern:/(\s)\.(?=\s)/,lookbehind:!0}]},s={"lisp-marker":RegExp("&(?!\\d)[-+*/~!@$%^=<>{}\\w]+"),varform:{pattern:RegExp("\\("+e+"\\s+(?=\\S)"+t+"\\)"),inside:n},argument:{pattern:RegExp("(^|[\\s(])"+e),lookbehind:!0,alias:"variable"},rest:n},r="\\S+(?:\\s+\\S+)*",i={pattern:RegExp(d+t+"(?=\\))"),lookbehind:!0,inside:{"rest-vars":{pattern:RegExp("&(?:body|rest)\\s+"+r),inside:s},"other-marker-vars":{pattern:RegExp("&(?:aux|optional)\\s+"+r),inside:s},keys:{pattern:RegExp("&key\\s+"+r+"(?:\\s+&allow-other-keys)?"),inside:s},argument:{pattern:RegExp(e),alias:"variable"},punctuation:/[()]/}};n.lambda.inside.arguments=i,n.defun.inside.arguments=a.util.clone(i),n.defun.inside.arguments.inside.sublist=i,a.languages.lisp=n,a.languages.elisp=n,a.languages.emacs=n,a.languages["emacs-lisp"]=n})(Prism)}}]);
